#!/bin/bash

# Check for existing authentication
if [ -z ${OS_AUTH_URL+1} ]; then 
  echo "No authentication is set. Have you called 'source os-auth' before?";
  echo "Exiting."
  exit 1 
fi

which openstack > /dev/null
if [ ! $? -eq 0 ]; then
  echo -e "[ERROR]: OpenStack Python libraries not found. Exiting."
  exit 1
fi

DNS_CMD="getent hosts ls3cloud1.informatik.uni-wuerzburg.de | awk '{ print \$1 }'"
which getent > /dev/null
if [ ! $? -eq 0 ]; then
  which dscacheutil > /dev/null
  if [ ! $? -eq 0 ]; then
    echo -e "[ERROR]: Getent libraries or dscacheutil (mac) not found. Needed for IP address resolution command. Exiting."
    exit 1
  else
    # we are on a mac and have dscacheutil
    DNS_CMD="dscacheutil -q host -a name ls3cloud1.informatik.uni-wuerzburg.de | grep ip_address | awk '{print \$2}'"
  fi
fi

#

# check for new openstack-client version
if [ "$(openstack --version 2>&1 | awk '{ print $2}' | awk -F'.' '{print $1}')" -lt 3 ]; then
        echo -e "[ERROR]: OpenStack client tools version too old. Please refer to README.md and install virtualenv and requirements.txt. Exiting."
        exit 1
fi

# check for proxy ip
# ls3cloud1.informatik.uni-wuerzburg.de must point to proxy IP 
if [ "$(eval $DNS_CMD)" != "132.187.12.42" ]; then 
	echo "[ERROR]: ls3cloud1.informatik.uni-wuerzburg.de must point to proxy IP"
	echo "Change dns resolution to 132.187.12.42 (proxy server), otherwise auth will fail due to SSL cert issues. Exiting." 
	exit 1
fi

# check auth credentials
if [ -z "$OS_PROJECT_NAME" ]; then
	echo "[ERROR]: OS_PROJECT_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_USERNAME" ]; then
	echo "[ERROR]: OS_USERNAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_PASSWORD" ]; then
	echo "[ERROR]: OS_PASSWORD env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_AUTH_URL" ]; then
	echo "[ERROR]: OS_AUTH_URL env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_PROJECT_DOMAIN_NAME" ]; then
	echo "[ERROR]: OS_PROJECT_DOMAIN_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_USER_DOMAIN_NAME" ]; then
	echo "[ERROR]: OS_USER_DOMAIN_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi



# Parse parameters
for i in "$@"
do
case $i in
  --project=*)
  INPUT_PROJECT="${i#*=}"
  shift
  ;;
  --users=*)
  INPUT_USER_LIST="${i#*=}"
  shift
  ;;
  --groups=*)
  INPUT_GROUP_LIST="${i#*=}"
  shift
  ;;
  --no-default-firewall*)
  INPUT_NO_DEFAULT_FIREWALL=1
  shift
  ;;
  --help*)
  PRINT_USAGE=1
  shift
  ;;
  *)
  PRINT_USAGE=1;
  echo "error: unknown option ${i#*}"
  ;;
esac
done

# Print usage
if [ ! -z ${PRINT_USAGE+1} ]; then
  echo -e "\nUsage: './os-project-create' with the following parameters:"
  echo -e "\n --project="
  echo -e "\tThe desired project name. Please respect the following naming conventions for new projects:"
  echo -e "\t * User related projects: user-firstname.lastname"
  echo -e "\t * Shared projects: shared-myproject"
  echo -e "\n --users="
  echo -e "\tList of comma separated user names, which will be added as members for the given project."
  echo -e "\n --groups="
  echo -e "\tList of comma separated group names, which will be added as member for the given project."
  echo -e "\n --no-default-firewall (optional)"
  echo -e "\tPer default this script will enable all ICMP, TCP and UDP traffic to the virtual instances\n\tof this project. With this parameter the security rules will leaved untouched to deny all\n\ttraffic per default."
  echo
  exit 1
fi

# Project name dialog
if [ -z ${INPUT_PROJECT+1} ]; then
  echo -n "Enter new project name: "
  read INPUT_PROJECT
fi

# Check for project name prefix
if [[ $INPUT_PROJECT != user-* ]] && [[ $INPUT_PROJECT != shared-* ]]; then
  echo "It is required that your project name starts with 'user-' or 'shared-'."
  echo "Run './os-project-create --help' for additional information."
  exit 1
fi

# Get the project IDs
P_ID=$(openstack project list | grep "${INPUT_PROJECT}" | cut -d'|' -f2 | tr -d ' ')
NETWORK_ID=$(openstack network list | grep "${INPUT_PROJECT}" | cut -d'|' -f2 | tr -d ' ')
SUBNET_ID=$(openstack subnet list | grep "${INPUT_PROJECT}" | cut -d'|' -f2 | tr -d ' ')
ROUTER_ID=$(openstack router list | grep "${INPUT_PROJECT}" | cut -d'|' -f2 | tr -d ' ')
SECURITY_GROUP_ID=$(openstack security group list | grep "${P_ID}" | cut -d'|' -f2 | tr -d ' ')
SECURITY_GROUP_RULES_ID=$(openstack security group rule list | grep "${SECURITY_GROUP_ID}" | cut -d'|' -f2 | tr -d ' ')
SUBNET_POOL_ID=$(openstack subnet pool list | grep "${INPUT_PROJECT}" | cut -d'|' -f2 | tr -d ' ')

echo "...$P_ID..."
if [[ ${P_ID} == "" ]]; then
    echo "Project $INPUT_PROJECT does not exist!"
    exit 1
fi

# Remove subnet from router
if [[ ${ROUTER_ID} != "" && ${SUBNET_ID} != "" ]]; then
    openstack router remove subnet ${ROUTER_ID} ${SUBNET_ID}
fi

# Delete the securty groups
if [[ ${SECURITY_GROUP_RULES_ID} != "" && ${SECURITY_GROUP_ID} != "" ]]; then
    openstack security group rule delete ${SECURITY_GROUP_RULES_ID}
    openstack security group delete ${SECURITY_GROUP_ID}
fi

# Delete the subnet
if [[ ${SUBNET_ID} != "" ]]; then
    openstack subnet delete ${SUBNET_ID}
fi

# Delete the subnet pool
if [[ ${SUBNET_POOL_ID} != "" ]]; then
    openstack subnet pool delete ${SUBNET_POOL_ID}
fi

# Delete the network
if [[ ${NETWORK_ID} != "" ]]; then
    openstack network delete ${NETWORK_ID}
fi

# Delete the router
if [[ ${ROUTER_ID} != "" ]]; then
    openstack router delete ${ROUTER_ID}
fi

# Delete the project
if [[ ${PROJECT_ID} != "" ]]; then
    openstack project delete ${P_ID}
fi

echo "Done"

exit 0
