#!/bin/bash

# Check for existing authentication
if [ -z ${OS_AUTH_URL+1} ]; then 
  echo "No authentication is set. Have you called 'source os-auth' before?";
  echo "Exiting."
  exit 1 
fi

which openstack > /dev/null
if [ ! $? -eq 0 ]; then
  echo -e "[ERROR]: OpenStack Python libraries not found. Exiting."
  exit 1
fi

which getent > /dev/null
if [ ! $? -eq 0 ]; then
  echo -e "[ERROR]: Getent libraries not found. Needed for \"getent hosts\" command. Exiting."
  exit 1
fi

#

# check for new openstack-client version
if [ "$(openstack --version 2>&1 | awk '{ print $2}' | awk -F'.' '{print $1}')" -lt 3 ]; then
        echo -e "[ERROR]: OpenStack client tools version too old. Please refer to README.md and install virtualenv and requirements.txt. Exiting."
        exit 1
fi

# check for proxy ip
# ls3cloud1.informatik.uni-wuerzburg.de must point to proxy IP 
if [ "$(getent hosts ls3cloud1.informatik.uni-wuerzburg.de | awk '{ print $1 }')" != "132.187.12.42" ]; then 
	echo "[ERROR]: ls3cloud1.informatik.uni-wuerzburg.de must point to proxy IP"
	echo "Change dns resolution to 132.187.12.42 (proxy server), otherwise auth will fail due to SSL cert issues. Exiting." 
	exit 1
fi

# check auth credentials
if [ -z "$OS_PROJECT_NAME" ]; then
	echo "[ERROR]: OS_PROJECT_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_USERNAME" ]; then
	echo "[ERROR]: OS_USERNAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_PASSWORD" ]; then
	echo "[ERROR]: OS_PASSWORD env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_AUTH_URL" ]; then
	echo "[ERROR]: OS_AUTH_URL env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_PROJECT_DOMAIN_NAME" ]; then
	echo "[ERROR]: OS_PROJECT_DOMAIN_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi
if [ -z "$OS_USER_DOMAIN_NAME" ]; then
	echo "[ERROR]: OS_USER_DOMAIN_NAME env variable is not set. Please run \"source ./os-auth\". Please note that you have to source it, otherwise the variables are not accessible. Exiting."
	exit 1
fi



# Parse parameters
for i in "$@"
do
case $i in
  --project=*)
  INPUT_PROJECT="${i#*=}"
  shift
  ;;
  --users=*)
  INPUT_USER_LIST="${i#*=}"
  shift
  ;;
  --groups=*)
  INPUT_GROUP_LIST="${i#*=}"
  shift
  ;;
  --no-default-firewall*)
  INPUT_NO_DEFAULT_FIREWALL=1
  shift
  ;;
  --help*)
  PRINT_USAGE=1
  shift
  ;;
  *)
  PRINT_USAGE=1;
  echo "error: unknown option ${i#*}"
  ;;
esac
done

# Print usage
if [ ! -z ${PRINT_USAGE+1} ]; then
  echo -e "\nUsage: './os-project-create' with the following parameters:"
  echo -e "\n --project="
  echo -e "\tThe desired project name. Please respect the following naming conventions for new projects:"
  echo -e "\t * User related projects: user-firstname.lastname"
  echo -e "\t * Shared projects: shared-myproject"
  echo -e "\n --users="
  echo -e "\tList of comma separated user names, which will be added as members for the given project."
  echo -e "\n --groups="
  echo -e "\tList of comma separated group names, which will be added as member for the given project."
  echo -e "\n --no-default-firewall (optional)"
  echo -e "\tPer default this script will enable all ICMP, TCP and UDP traffic to the virtual instances\n\tof this project. With this parameter the security rules will leaved untouched to deny all\n\ttraffic per default."
  echo
  exit 1
fi

# Project name dialog
if [ -z ${INPUT_PROJECT+1} ]; then
  echo -n "Enter new project name: "
  read INPUT_PROJECT
fi

# Check for project name prefix
if [[ $INPUT_PROJECT != user-* ]] && [[ $INPUT_PROJECT != shared-* ]]; then
  echo "It is required that your project name starts with 'user-' or 'shared-'."
  echo "Run './os-project-create --help' for additional information."
  exit 1
fi

# Users which should have access to the new project
if [ -z ${INPUT_USER_LIST+1} ]; then
  echo -n "Enter users (comma separated, no whitespace), which should have access to the project: "
  read INPUT_USER_LIST
fi

# Groups which should have acces to the new project
if [ -z ${INPUT_GROUP_LIST+1} ]; then
  echo -n "Enter groups (comma separated, no whitespace), which should have access to the project: "
  read INPUT_GROUP_LIST
fi

# Create project by calling the OpenStack API
PROJECT=`openstack project create --domain $OS_PROJECT_DOMAIN_NAME --format json $INPUT_PROJECT`
if [ $? -eq 0 ]; then
  echo -e "[OK]: Project '$INPUT_PROJECT' successfully created."
else
  echo -e "[ERROR]: Project '$INPUT_PROJECT' could not be created."
  exit 1
fi
#echo $PROJECT

# grant access to newly created project for current user
./os-project-access-grant --users=$OS_USERNAME --project=$INPUT_PROJECT

# grant access to newly created project for additional users
if [ ! -z "$INPUT_USER_LIST" ]; then
  ./os-project-access-grant --users=$INPUT_USER_LIST --project=$INPUT_PROJECT
fi

# grant access to newly created project for additional groups
if [ ! -z "$INPUT_GROUP_LIST" ]; then
  ./os-project-access-grant --groups=$INPUT_GROUP_LIST --project=$INPUT_PROJECT
fi

# set quota: 8 GB RAM
openstack quota set --ram 8192 $INPUT_PROJECT
echo -e "[OK]: Set total size of RAM to 8 GB."

# set quota: 40 GB HDD
openstack quota set --gigabytes 40 $INPUT_PROJECT
echo -e "[OK]: Set total size of volumes and snapshots to 40 GB."

# export created project as default project for following commands
export OS_PROJECT_NAME=$INPUT_PROJECT

if [ -z ${INPUT_NO_DEFAULT_FIREWALL+1} ]; then
  # read id from default security group and add some rules
  DEFAULT_SECURITY_GROUP_ID=`openstack security group list --format json | jq --raw-output '.[] | select(.Name=="default") | .["ID"]'`
  openstack security group rule create --proto icmp --src-ip 0.0.0.0/0 --dst-port 0 $DEFAULT_SECURITY_GROUP_ID > /dev/null
  openstack security group rule create --proto tcp --src-ip 0.0.0.0/0 --dst-port 0 $DEFAULT_SECURITY_GROUP_ID > /dev/null
  openstack security group rule create --proto udp --src-ip 0.0.0.0/0 --dst-port 0 $DEFAULT_SECURITY_GROUP_ID > /dev/null
  echo -e "[OK]: Firewall rules to allow all ICMP, TCP and UDP traffic successfully created."
fi

# create internal network with subnet, one router and nat
openstack network create ${OS_PROJECT_NAME}-net01 > /dev/null
openstack subnet pool create --pool-prefix 192.168.200.0/24 ${OS_PROJECT_NAME}-subnetpool01 > /dev/null
# 2017-05-24 I got problems since --prefix-length was not accepted :/ -> change to neutron api
#openstack subnet create --network ${OS_PROJECT_NAME}-net01 --subnet-pool ${OS_PROJECT_NAME}-subnetpool01 --prefix-length 24 ${OS_PROJECT_NAME}-subnet01 > /dev/null
neutron subnet-create --subnetpool ${OS_PROJECT_NAME}-subnetpool01 --prefixlen 24 --name ${OS_PROJECT_NAME}-subnet01 ${OS_PROJECT_NAME}-net01 > /dev/null
openstack router create ${OS_PROJECT_NAME}-rt01 > /dev/null
openstack router add subnet ${OS_PROJECT_NAME}-rt01 ${OS_PROJECT_NAME}-subnet01 > /dev/null
neutron router-gateway-set ${OS_PROJECT_NAME}-rt01 net04_ext > /dev/null
neutron subnet-update ${OS_PROJECT_NAME}-subnet01 --dns-nameservers list=true 132.187.0.13 > /dev/null
echo -e "[OK]: Internal network with one subnet, one router and NAT configuration created."

echo

exit 0
