#!/bin/bash

# reset previous set username and password
unset INPUT_USERNAME
unset INPUT_PASSWORD
unset INPUT_PROJECT
unset PRINT_USAGE

# check whether the script is sourced or not
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || 
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] || 
 [[ -n $BASH_VERSION && $0 != "$BASH_SOURCE" ]]) && SOURCED=1 || SOURCED=0
if [[ $SOURCED -eq 0 ]]; then
  echo "[ERROR]: Please \"source\" the script with \"source ./os-auth\". Exiting."
  exit 1
fi

# check for new openstack-client version
if [ "$(openstack --version 2>&1 | awk '{ print $2}' | awk -F'.' '{print $1}')" -lt 3 ]; then
  echo -e "[ERROR]: OpenStack client tools version too old. Please refer to README.md and install virtualenv and requirements.txt. Exiting."
  return
fi

# parse parameters
for i in "$@"
do
case $i in
  --user=*)
  INPUT_USERNAME="${i#*=}"
  shift
  ;;
  --password=*)
  INPUT_PASSWORD="${i#*=}"
  shift
  ;;
  --project=*)
  INPUT_PROJECT="${i#*=}"
  shift
  ;;
  --help*)
  PRINT_USAGE=1
  shift
  ;;
  *)
  PRINT_USAGE=1;
  echo "error: unknown option ${i#*}"
  ;;
esac
done

if [ ! -z ${PRINT_USAGE+1} ]; then
  # print usage
  echo -e "\nUsage: 'source os-auth' with the following parameters:"
  echo -e "\n --user="
  echo -e "\tUsername which should be authenticated against LDAP."
  echo -e "\n --password="
  echo -e "\tPassord for the user. If no password is given, it will be promted on the console."
  echo -e "\n --project="
  echo -e "\tProject for which the user should be authenticated. Project 'shared-testing' is used as default."
  echo 
else
  # user name and password dialog
  if [ -z ${INPUT_USERNAME+1} ]; then
    echo -n "Enter OpenStack username (LS3-LDAP): "
    read INPUT_USERNAME
  fi
  if [ -z ${INPUT_PASSWORD+1} ]; then
    echo -n "Enter OpenStack password (hidden input): "
    read -sr INPUT_PASSWORD
    echo
  fi
  if [ -z ${INPUT_PROJECT+1} ]; then
    echo -n "Enter OpenStack project (optional) [shared-assis-general]: "
    read INPUT_PROJECT
    if [ -z $INPUT_PROJECT ]; then
      INPUT_PROJECT="shared-assis-general"
    fi
  fi

  if [ -z "${INPUT_USERNAME}" ]; then
  	echo "Username should not be empty. Exiting"
	return
  fi
  if [ -z "${INPUT_PASSWORD}" ]; then
  	echo "Password should not be empty. Exiting"
	return
  fi
  if [ -z "${INPUT_PROJECT}" ]; then
  	echo "Project should not be empty. Exiting"
 	return	
  fi

  # set openstack environment variables
  export LC_ALL=C
  export OS_IDENTITY_API_VERSION=3
  export OS_PROJECT_NAME=$INPUT_PROJECT
  export OS_USER_DOMAIN_NAME='lsinfo3'
  export OS_PROJECT_DOMAIN_NAME='lsinfo3'
  export OS_USERNAME=$INPUT_USERNAME
  export OS_PASSWORD=$INPUT_PASSWORD
  export OS_AUTH_URL='https://ls3cloud1.informatik.uni-wuerzburg.de:5000/v3/'
  export OS_AUTH_STRATEGY='keystone'
  export OS_REGION_NAME='RegionOne'
  #export OS_CACERT='ls3cloud1.pem'
  export CINDER_ENDPOINT_TYPE='public'
  export GLANCE_ENDPOINT_TYPE='public'
  export KEYSTONE_ENDPOINT_TYPE='public'
  export NOVA_ENDPOINT_TYPE='public'
  export NEUTRON_ENDPOINT_TYPE='public'
  export OS_ENDPOINT_TYPE='public'
  export OS_INTERFACE='public'
  export MURANO_REPO_URL='http://storage.apps.openstack.org/'
  echo "[OK]: Authentication temporary stored."

  # check whether auth was successful
  CMD="openstack project list 2> /dev/null"
  RES=$(eval $CMD)
  if [[ -z "$RES" ]]; then
	echo "[ERROR]: Authentification check was unsuccessful. Exiting."
	echo "[ERROR]: Please retry!"
	unset OS_AUTH_URL
	return
  fi
  echo "[OK]: Authentication verified."

  ADMIN=$(openstack role list 2> /dev/null | grep admin) 
  RED='\033[0;31m'
  YELLOW='\033[0;33m'
  NC='\033[0m'
  if [[ -n "$ADMIN" ]]; then
  	RED='\033[0;31m'
	NC='\033[0m'
  	echo -e "[OK]: ${RED}Admin rights${NC} -> you can create/delete projects.\t(${OS_USERNAME}@$OS_PROJECT_NAME)"
  else
  	echo -e "[OK]: Normal ${YELLOW}member${NC} rights -> you can change project details, but cannot create/delete projects.\t(${OS_USERNAME}@$OS_PROJECT_NAME)"
  fi

fi
